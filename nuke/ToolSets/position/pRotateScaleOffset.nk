set cut_paste_input [stack 0]
version 9.0 v6
push $cut_paste_input
add_layer {pWorld pWorld.red pWorld.green pWorld.blue}
Group {
 name pRotateScaleOffset
 help "<b>P_Matte</b> creates a sphere or cube shaped 3D matte based on a pass/layer containing position data"
 knobChanged "\nn = nuke.thisNode()\nk = nuke.thisKnob()\ns = nuke.toNode('SphereMatte')\nr = nuke.toNode('Start_End')\n\nif k.name() == \"falloffType\":\n    n\['falloff'].setVisible( k.value() != 'None' )\n    n\['exp'].setVisible( k.value() == 'Exponential' )\n\n"
 selected true
 xpos 5998
 ypos -4913
 addUserKnob {20 User}
 addUserKnob {41 in l "position data" t "Choose a layer from the input that contains position data" T Shuffle_Input_Channels.in}
 addUserKnob {41 output t "Resulting matte will be written to this layer only" T OutChannel.out}
 addUserKnob {6 unpremultiply t "Check if your position layer is premultiplied" +STARTLINE}
 addUserKnob {6 useAlpha l "ignore outside alpha" t "If your input has an alpha channel, checking this will force everything outside that alpha channel to be black" -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 matteShape t "Choose the shape of the 3D matte. Current options are \"Sphere\" and \"Cube\"" M {Sphere Cube ""}}
 addUserKnob {41 center t "Sample the viewer or copy XYZ coordinates here to choose the center of the 3D sphere or cube" T Center.center}
 addUserKnob {26 ""}
 addUserKnob {41 rot_order l "rotation order" T Axis1.rot_order}
 addUserKnob {41 rotate T Axis1.rotate}
 addUserKnob {41 scaling l scale T Axis1.scaling}
 addUserKnob {41 uniform_scale l "uniform scale" T Axis1.uniform_scale}
 addUserKnob {41 skew T Axis1.skew}
 addUserKnob {41 pivot T Axis1.pivot}
 addUserKnob {26 ""}
 addUserKnob {4 falloffType M {None Linear Smooth Quadratic Cubic Exponential ""}}
 falloffType Linear
 addUserKnob {7 falloff}
 falloff 1
 addUserKnob {7 exp +HIDDEN R 0.1 10}
 exp 9.5
}
 Input {
  inputs 0
  name img
  xpos -828
  ypos -353
 }
set N9b2cd400 [stack 0]
 AddChannels {
  channels alpha
  color 1
  name AddChannels1
  xpos -828
  ypos -256
 }
 Shuffle {
  in pWorld
  alpha blue
  out rgb
  name Shuffle_Input_Channels
  xpos -828
  ypos -198
 }
set N3037a800 [stack 0]
 Unpremult {
  name Unpremult1
  xpos -646
  ypos -198
  disable {{!parent.unpremultiply i}}
 }
 Dot {
  name Dot2
  xpos -326
  ypos -193
 }
 Add {
  channels rgb
  value {{-center} {-center} {-center} {curve}}
  name Center
  xpos -359
  ypos -137
  addUserKnob {20 User}
  addUserKnob {18 center}
  center {0 0 0}
  addUserKnob {6 center_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 Add {
  channels rgb
  value {{-Axis1.world_matrix.3} {-Axis1.world_matrix.7} {-Axis1.world_matrix.11} {curve}}
  name Translate_Pivot
  xpos -359
  ypos -111
 }
 ColorMatrix {
  matrix {
      {{Axis1.world_matrix.0} {Axis1.world_matrix.1} {Axis1.world_matrix.2}}
      {{Axis1.world_matrix.4} {Axis1.world_matrix.5} {Axis1.world_matrix.6}}
      {{Axis1.world_matrix.8} {Axis1.world_matrix.9} {Axis1.world_matrix.10}}
    }
  invert true
  name Rotate_Scale_Skew
  xpos -359
  ypos -85
  disable {{hasError x200 1}}
 }
set N99a7b400 [stack 0]
 Expression {
  expr3 "(parent.useAlpha &&  a == 0.0 )? 0 : 1-max(abs(r),abs(g),abs(b))"
  name CubeMatte
  xpos -285
  ypos -11
 }
push $N99a7b400
 Expression {
  expr3 "(parent.useAlpha &&  a == 0.0 )? 0 : 1-(sqrt((r*r)+(g*g)+(b*b)))"
  name SphereMatte
  xpos -442
  ypos -12
 }
 Switch {
  inputs 2
  which {{matteShape i}}
  name Switch1
  xpos -366
  ypos 58
 }
 Grade {
  channels alpha
  whitepoint {{falloffType?falloff:0}}
  white_clamp true
  name Falloff
  xpos -366
  ypos 124
 }
set Na833bc00 [stack 0]
 Expression {
  expr3 pow(a,parent.exp)
  name Exponential
  xpos -81
  ypos 229
 }
push $Na833bc00
 Expression {
  expr3 clamp((a**3),0,1)
  name Cubic
  xpos -175
  ypos 228
 }
push $Na833bc00
 Expression {
  expr3 clamp(pow2(a),0,1)
  name Quadratic
  xpos -269
  ypos 227
 }
push $Na833bc00
 Expression {
  expr3 smoothstep(0,1,a)
  name Smooth
  xpos -366
  ypos 230
 }
push $Na833bc00
 NoOp {
  name Linear
  xpos -457
  ypos 231
 }
push $Na833bc00
 NoOp {
  name None
  xpos -557
  ypos 231
 }
 Switch {
  inputs 6
  which {{falloffType i}}
  name Switch2
  xpos -366
  ypos 318
 }
 Remove {
  operation keep
  channels alpha
  name Remove1
  xpos -366
  ypos 378
 }
 Shuffle {
  in alpha
  name OutChannel
  xpos -366
  ypos 439
 }
push $N3037a800
 Dot {
  name Dot1
  xpos -794
  ypos 527
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels all
  name Copy1
  xpos -366
  ypos 508
 }
push $N9b2cd400
push $N99a7b400
 Shuffle {
  out {{{parent.Shuffle_Input_Channels.in}}}
  name Shuffle1
  xpos 70
  ypos -82
 }
 ShuffleCopy {
  inputs 2
  red red
  green green
  blue blue
  name ShuffleCopy1
  xpos 70
  ypos -34
 }
set Naf026000 [stack 0]
 Output {
  name Output1
  xpos 70
  ypos 11
 }
 Axis2 {
  inputs 0
  xform_order STR
  rot_order ZYX
  rotate {90 0 0}
  name Axis1
  xpos 47
  ypos -342
 }
push $Naf026000
 Shuffle {
  in pWorld
  alpha blue
  out rgb
  name Shuffle_Input_Channels1
  xpos 243
  ypos -10
 }
end_group
